generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contract {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Package Information
  namaPaket    String
  namaPenyedia String?

  // Officials
  ppk                 String?
  nipPPK              String?
  korwaslap           String?
  nipKorwaslap        String?
  pengawasLapangan    String?
  nipPengawasLapangan String?

  // Financial details
  paguAnggaran Float?  @default(0.0)
  nilaiKontrak Float?  @default(0.0)
  sumberDana   String?

  // Contract details
  nomorKontrak    String?
  tanggalKontrak  DateTime?
  masaPelaksanaan Int?      @default(0)
  subKegiatan     String?
  volumeKontrak   String?
  satuanKontrak   String?

  // Supervision details
  konsultanSupervisi       String?
  nomorKontrakSupervisi    String?
  nilaiKontrakSupervisi    Float?    @default(0.0)
  tanggalKontrakSupervisi  DateTime?
  masaPelaksanaanSupervisi Int?      @default(0)

  // Project status and completion
  hasilProdukAkhir String?
  dimensi          String?
  kendala          Boolean? @default(false)
  permasalahan     String?
  keterangan       String?

  // Documentation
  dokumentasiAwal   String?
  dokumentasiTengah String?
  dokumentasiAkhir  String?

  // Addendum handling
  hasAddendum Boolean? @default(false)

  addendum          Addendum[]
  financialProgress FinancialProgress?
  physicalProgress  PhysicalProgress[]
  location          Location?
  contractAccess    ContractAccess[]

  @@map("contracts")
}

model PhysicalProgress {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  contractId String

  month     String
  week      Int
  startDate DateTime?
  endDate   DateTime?
  rencana   Float
  realisasi Float
  deviasi   Float

  bermasalah       Boolean @default(false)
  deskripsiMasalah String?
  keterangan       String?

  @@unique([contractId, month, week])
  @@map("progress_fisik")
}

model FinancialProgress {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  totalProgress Float? @default(0.0)
  totalPayment  Float? @default(0.0)
  uangMuka      Float? @default(0.0)
  termin1       Float? @default(0.0)
  termin2       Float? @default(0.0)
  termin3       Float? @default(0.0)
  termin4       Float? @default(0.0)

  contractId String   @unique
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@map("progress_keuangan")
}

model Location {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  kota           String?
  distrik        String?
  kampung        String?
  koordinatAwal  String?
  koordinatAkhir String?

  contractId String   @unique
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@map("lokasi")
}

model Addendum {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name                String?
  tipe                String?
  hari                String?
  volume              String?
  satuan              String?
  pemberianKesempatan Boolean

  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  contractId String

  @@map("addendums")
}

model ContractAccess {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)
  contractId String

  @@unique([userId, contractId])
  @@map("contract_access")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  email        String    @unique
  password     String
  role         Role      @default(SUPERADMIN)
  lastLoggedIn DateTime?

  contractAccess ContractAccess[]

  @@map("users")
}

enum Role {
  ADMIN
  SUPERADMIN
  CONSULTANT
}
