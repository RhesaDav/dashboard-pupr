// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Contract {
  id                         String       @id @default(uuid())
  namaPaket                  String
  kabupatenKota              String
  distrik                    String
  kampung                    String
  titikKoordinat             String?

  pejabatPembuatKomitmen     String
  nipPejabatPembuatKomitmen  String

  nomorKontrak               String
  namaPenyedia               String

  nilaiKontrak               Float
  nilaiAnggaran              Float
  sumberDana                 String

  tanggalKontrak             DateTime

  volumeKontrak              Float
  satuanKontrak              String

  korwaslap                  String
  nipKorwaslap               String

  pengawasLapangan           String
  nipPengawasLapangan        String

  hasilProdukAkhir           String?
  progresFisik               Float?
  progresKeuangan            Float?

  keuanganTerbayar           Float?
  volumeCapaian              Float?
  satuanCapaian              String?

  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
}


